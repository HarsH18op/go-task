basePath: /
definitions:
  models.CreateUserRequestModel:
    properties:
      age:
        description: optional
        example: 18
        maximum: 120
        minimum: 0
        type: integer
      bio:
        description: optional
        example: I am Harsh
        type: string
      birthday:
        description: optional, omitempty omits validations if it has no value
        example: "2001-04-30"
        type: string
      email:
        example: abd@gmail.com
        type: string
      mobile_number:
        example: "9898009898"
        type: string
      name:
        example: Harsh
        type: string
      pancard:
        example: ABCDE12345
        type: string
    required:
    - email
    - mobile_number
    - name
    - pancard
    type: object
  models.CreateUserResponseModel:
    properties:
      id:
        example: 1
        type: integer
      message:
        example: User created successfully
        type: string
    type: object
  models.ErrorResponseModel:
    properties:
      errors:
        additionalProperties:
          type: string
        description: Optional field-level validation errors
        example:
          email: must be a valid email address
        type: object
      message:
        description: General message
        example: invalid input data
        type: string
    type: object
  models.GetUserResponseModel:
    properties:
      age:
        example: 25
        type: integer
      bio:
        example: I'm Harsh
        type: string
      birthday:
        example: "2001-04-30"
        type: string
      createdAt:
        example: "2025-06-15 11:00:00"
        type: string
      email:
        example: abd@gmail.com
        type: string
      id:
        example: 1
        type: integer
      mobileNumber:
        example: "9898009898"
        type: string
      name:
        example: Harsh
        type: string
      pancard:
        example: ABCDE12345
        type: string
      updatedAt:
        example: "2025-06-15 11:00:00"
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is a sample server for managing users.
  title: User API
  version: "1.0"
paths:
  /api/auth/users:
    get:
      consumes:
      - application/json
      description: Returns a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseModel'
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Creates a user with provided information
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequestModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponseModel'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponseModel'
      summary: Create a new user
      tags:
      - Users
swagger: "2.0"
